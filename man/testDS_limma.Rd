% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testDS_limma.R
\name{testDS_limma}
\alias{testDS_limma}
\title{Test for differential states: method 'diffcyt-DS-limma'}
\usage{
testDS_limma(d_counts, d_medians, design, contrast, block = NULL,
  min_cells = 3, min_samples = NULL, plot = TRUE, path = ".")
}
\arguments{
\item{d_counts}{\linkS4class{SummarizedExperiment} object containing cluster cell
counts, from \code{\link{calcCounts}}.}

\item{d_medians}{\linkS4class{SummarizedExperiment} object containing cluster medians
(median marker expression for each cluster-sample combination), from
\code{\link{calcMedians}}.}

\item{design}{Design matrix, created with \code{\link{createDesignMatrix}}. See
\code{\link{createDesignMatrix}} for details.}

\item{contrast}{Contrast matrix, created with \code{\link{createContrast}}. See
\code{\link{createContrast}} for details.}

\item{block}{(Optional) Vector or factor of block IDs (e.g. patient IDs) for paired
experimental designs, to be included as random effects. If provided, the block IDs
will be included as random effects using the \code{limma} \code{duplicateCorrelation}
methodology. Alternatively, block IDs can be included as fixed effects in the design
matrix (\code{\link{createDesignMatrix}}). See details.}

\item{min_cells}{Filtering parameter. Default = 3. Clusters are kept for differential
testing if they have at least \code{min_cells} cells in at least \code{min_samples}
samples.}

\item{min_samples}{Filtering parameter. Default = \code{number of samples / 2}, which
is appropriate for two-group comparisons (of equal size). Clusters are kept for
differential testing if they have at least \code{min_cells} cells in at least
\code{min_samples} samples.}

\item{plot}{Whether to save diagnostic plot. Default = TRUE.}

\item{path}{Path for diagnostic plot. Default = current working directory.}
}
\value{
Returns a new \linkS4class{SummarizedExperiment} object, where rows =
  cluster-marker combinations, and columns = samples. In the rows, clusters are
  repeated for each cell state marker (i.e. the sheets or \code{assays} from the
  previous \code{d_medians} object are stacked into a single matrix). Differential test
  results are stored in the \code{rowData} slot. Results include raw p-values and
  adjusted p-values from the \code{limma} moderated tests, which can be used to rank
  cluster-marker combinations by evidence for differential states within cell
  populations. The results can be accessed with the \code{rowData} accessor function.
}
\description{
Calculate tests for differential states within cell populations using method
'diffcyt-DS-limma'
}
\details{
Calculates tests for differential states within cell populations (i.e. differential
expression of cell state markers within clusters). Clusters are defined using cell type
markers, and cell states are characterized by the median transformed expression of cell
state markers.

This method uses the \code{limma} package (Ritchie et al. 2015, \emph{Nucleic Acids
Research}) to fit models and calculate moderated tests at the cluster level. Moderated
tests improve statistical power by sharing information on variability (i.e. variance
across samples for a single cluster) between clusters. We use the option \code{trend =
TRUE} in the \code{eBayes} fitting function in order to stabilize the mean-variance
relationship. Diagnostic plots are shown if \code{plot = TRUE}.

The experimental design must be specified using a design matrix, which can be created
with \code{\link{createDesignMatrix}}. Flexible experimental designs are possible,
including blocking (e.g. paired designs), batch effects, and continuous covariates. See
\code{\link{createDesignMatrix}} for more details.

For paired designs, either fixed effects or random effects can be used. Fixed effects
are simpler, but random effects may improve power in data sets with unbalanced designs
or very large numbers of samples. To use fixed effects, provide the block IDs (e.g.
patient IDs) to \code{\link{createDesignMatrix}}. To use random effects, provide the
\code{block} argument here instead. This will make use of the \code{limma}
\code{duplicateCorrelation} methodology. Note that >2 measures per sample are not
possible in this case (fixed effects should be used instead). Block IDs should not be
included in the design matrix if the \code{limma} \code{duplicateCorrelation}
methodology is used.

The contrast matrix specifying the contrast of interest can be created with
\code{\link{createContrast}}. See \code{\link{createContrast}} for more details.

Filtering: Clusters are kept for differential testing if they have at least
\code{min_cells} cells in at least \code{min_samples} samples. This removes clusters
with very low cell counts across conditions, to improve power.

Weights: Cluster cell counts are used as precision weights (across all samples and
clusters); allowing the \code{limma} model fitting functions to account for uncertainty
due to the total number of cells per sample (library sizes) and total number of cells
per cluster.
}
\examples{
# For a full workflow example demonstrating the use of each function in the 'diffcyt'
# pipeline, see the package vignette.

# Function to create random data (one sample)
d_random <- function(n = 20000, mean = 0, sd = 1, ncol = 20, cofactor = 5) {
  sinh(matrix(rnorm(n, mean, sd), ncol = ncol)) * cofactor
}
# Create random data (without differential signal)
set.seed(123)
d_input <- list(
  sample1 = d_random(), 
  sample2 = d_random(), 
  sample3 = d_random(), 
  sample4 = d_random()
)
# Add differential signal (for some cells and markers in one group)
ix_rows <- 901:1000
ix_cols <- c(6:10, 16:20)
d_input[[3]][ix_rows, ix_cols] <- d_random(n = 1000, mean = 3, ncol = 10)
d_input[[4]][ix_rows, ix_cols] <- d_random(n = 1000, mean = 3, ncol = 10)

sample_info <- data.frame(
  sample = factor(paste0("sample", 1:4)), 
  group = factor(c("group1", "group1", "group2", "group2")), 
  stringsAsFactors = FALSE
)

marker_info <- data.frame(
  marker_name = paste0("marker", sprintf("\%02d", 1:20)), 
  is_marker = rep(TRUE, 20), 
  marker_type = factor(c(rep("cell_type", 10), rep("cell_state", 10)), 
                       levels = c("cell_type", "cell_state", "none")), 
  stringsAsFactors = FALSE
)

# Prepare data
d_se <- prepareData(d_input, sample_info, marker_info)

# Transform data
d_se <- transformData(d_se)

# Generate clusters
d_se <- generateClusters(d_se)

# Calculate counts
d_counts <- calcCounts(d_se)
# Calculate medians
d_medians <- calcMedians(d_se)

# Create design matrix
design <- createDesignMatrix(sample_info, cols_include = 2)
# Create contrast matrix
contrast <- createContrast(c(0, 1))

# Test for differential states (DS) within clusters
res_DS <- testDS_limma(d_counts, d_medians, design, contrast, plot = FALSE)

}
