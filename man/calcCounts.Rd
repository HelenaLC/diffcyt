% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calcCounts.R
\name{calcCounts}
\alias{calcCounts}
\title{Calculate cluster cell counts}
\usage{
calcCounts(d_se)
}
\arguments{
\item{d_se}{Data object from previous steps, in \linkS4class{SummarizedExperiment}
format, containing cluster labels as a column in the row meta-data (from
\code{\link{generateClusters}}).}
}
\value{
\code{d_counts}: \linkS4class{SummarizedExperiment} object, where rows =
  clusters, columns = samples, \code{assay} = values (counts).
}
\description{
Calculate number of cells per cluster-sample combination
}
\details{
Calculate number of cells per cluster-sample combination (referred to as cluster cell
'counts', 'abundances', or 'frequencies').

The cluster cell counts are required for testing for differential abundance of cell
populations, and are also used for weights and filtering when testing for differential
states within cell populations.

Results are returned as a new \linkS4class{SummarizedExperiment} object, where rows =
clusters, columns = samples, \code{assay} = values (counts). (Note that this structure
differs from the input data object.)
}
\examples{
# For a full workflow example demonstrating the use of each function in the 'diffcyt'
# pipeline, see the package vignette.

# Function to create random data (one sample)
d_random <- function(n = 20000, mean = 0, sd = 1, ncol = 20, cofactor = 5) {
  sinh(matrix(rnorm(n, mean, sd), ncol = ncol)) * cofactor
}
# Create random data (without differential signal)
set.seed(123)
d_input <- list(
  sample1 = d_random(), 
  sample2 = d_random(), 
  sample3 = d_random(), 
  sample4 = d_random()
)

experiment_info <- data.frame(
  sample_id = factor(paste0("sample", 1:4)), 
  group_id = factor(c("group1", "group1", "group2", "group2")), 
  stringsAsFactors = FALSE
)

marker_info <- data.frame(
  marker_name = paste0("marker", sprintf("\%02d", 1:20)), 
  marker_class = factor(c(rep("cell_type", 10), rep("cell_state", 10)), 
                        levels = c("cell_type", "cell_state", "none")), 
  stringsAsFactors = FALSE
)

# Prepare data
d_se <- prepareData(d_input, experiment_info, marker_info)

# Transform data
d_se <- transformData(d_se)

# Generate clusters
d_se <- generateClusters(d_se)

# Calculate counts
d_counts <- calcCounts(d_se)

}
